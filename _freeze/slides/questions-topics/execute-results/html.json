{
  "hash": "02cad7cf1f3990d70492a6c8bc95a3ad",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Fragen und Themen\nauthor: Andrew Ellis\ndate: last-modified\ndate-format: 'DD MMMM, YYYY'\nbibliography: ../bibliography.bib\nformat:\n  revealjs:\n    theme: default\n    title-slide-attributes:\n      data-background-opacity: '1'\n    footer: <a href=\"../index.html\">back to website ⤴️</a>\n    navigation-mode: linear\n    progress: true\n    scrollable: false\n    slide-number: true\n    show-slide-number: all\n    controls-layout: bottom-right\n    controls-tutorial: true\n    preview-links: auto\n    chalkboard: true\n    from: markdown+emoji\n    code-fold: true\n    code-summary: Show code\n    code-tools: true\n    menu:\n      sticky: true\n      keyboard: true\n      autoOpen: true\n      width: normal\n      numbers: true\n      markers: true\n    callout-appearance: simple\n    callout-icon: false\nexecute:\n  cache: false\n  keep-ipynb: true\n---\n\n## Themen\n\n::: {#d8ea72f5 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport seaborn as sns\n\n# Create a new graph\nG = nx.Graph()\n\n# Define the categories/nodes\ncategories = [\"Unterricht & Bildung\", \"Sprache & Schreiben\", \"Technologie & Innovation\", \"Freizeit & Lifestyle\", \"Feedback & Repräsentation\"]\n\n# Add nodes to the graph\nG.add_nodes_from(categories)\n\n# Define the relationships/edges based on the interpretation\nrelationships = [\n    (\"Unterricht & Bildung\", \"Sprache & Schreiben\"),\n    (\"Unterricht & Bildung\", \"Technologie & Innovation\"),\n    (\"Sprache & Schreiben\", \"Technologie & Innovation\"),\n    (\"Technologie & Innovation\", \"Freizeit & Lifestyle\"),\n    (\"Unterricht & Bildung\", \"Feedback & Repräsentation\")\n]\n\n# Add edges to the graph\nG.add_edges_from(relationships)\n\n# Define the topics under each category\ntopics = {\n    \"Unterricht & Bildung\": [\n        \"MC Fragen Entwicklung\", \"Case Study entwickeln\", \"Unterrichtsvorbereitung\", \n        \"KI-Management in den Unterricht integrieren\", \"Grundlagen kennen lernen\", \n        \"Sinnvoller Einsatz für Lehre reflektieren\", \"Generieren von MC-Fragen\", \n        \"Brainstorming/Ideengenerierung (z.T. mit Studierenden)\", \"Akademisches und berufliches Schreiben unterrichten\", \n        \"Funktionsweise von KI-Schreibtools\", \"Einsatzszenarien für KI-Schreibtools\", \n        \"Reflektierter Umgang mit KI-Schreibtools\", \"Unterstützung für Schüler*innen mit sprachlichen Schwierigkeiten\", \n        \"Verständnis von Schreibtools\", \"Sinnvoller Einsatz von Schreibtools durch Studierende und Mitarbeitende\"\n    ],\n    \"Sprache & Schreiben\": [\n        \"Formulierungshilfe bei wissenschaftlichen Schreibarbeiten\", \"Übersetzungen oder Überprüfungen von Texten in Deutsch\", \n        \"Kreative Schreibübung\", \"Übersetzungen\", \"Ideensammlung\", \n        \"Textkorrekturen/-anpassungen\", \"Perspektivenwechsel\", \"Szenarien erfinden lassen\", \n        \"Mails verfassen\", \"Konzepte überprüfen\"\n    ],\n    \"Technologie & Innovation\": [\n        \"Diverses\", \"Zeitersparnis bei Vorbereitungen mithilfe neuer Technologien\", \n        \"Prüfungen mit KI\", \"Open Book Prüfungen\", \"Grenzen der KI ausloten\", \n        \"Interesse an Entwicklungen der Sprachmodelle\"\n    ],\n    \"Freizeit & Lifestyle\": [\n        \"Fragen für Freizeitaktivitäten, z.B. bei Regenwetter mit Kleinkindern\", \n        \"Ideensammlung für Ausflüge in der Freizeit\", \"Programmplanung der Ferien\", \"Vorschlag für einen Mailtest\"\n    ],\n    \"Feedback & Repräsentation\": [\"Rückmeldung an das Institut an der BFH\"]\n}\n\n# Add topics as nodes to the graph\nfor category, topic_list in topics.items():\n    G.add_nodes_from(topic_list)\n    for topic in topic_list:\n        G.add_edge(category, topic)\n\n# Get a color palette with as many colors as there are topics\ncolors = sns.color_palette(\"husl\", len(topics))\n\n# Map each category to a color\ncolor_map = {}\nfor idx, category in enumerate(topics):\n    for topic in topics[category]:\n        color_map[topic] = colors[idx]\n\n# Add colors for the categories themselves\ncategory_colors = [\"red\", \"green\", \"blue\", \"purple\", \"orange\"]\nfor idx, category in enumerate(categories):\n    color_map[category] = category_colors[idx]\n\n# Get the colors for each node in the order they are in the graph\nnode_colors = [color_map[node] for node in G.nodes()]\n```\n:::\n\n\n::: {#93b99e3d .cell execution_count=2}\n``` {.python .cell-code}\n# Plotting the graph with different colors for each topic\nplt.figure(figsize=(20, 20)) #figsize=(20, 15)\npos = nx.spring_layout(G, seed=42, k=0.5, iterations=100)\nnx.draw(G, pos, with_labels=True, node_size=2000, node_color=node_colors, font_size=12, font_color='black', width=2, edge_color='gray', alpha=0.6)\nplt.title(\"Beziehungen zwischen den Bereichen und zugehörigen Themen\", fontsize=18)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](questions-topics_files/figure-html/cell-3-output-1.png){width=1939 height=1966}\n:::\n:::\n\n\n::: {#43d1af73 .cell execution_count=3}\n``` {.python .cell-code}\n# Adjust the figure size to be wider\nplt.figure(figsize=(25, 10))\n\n# Adjust the layout to be more spread out horizontally\npos = nx.spring_layout(G, seed=42, k=0.7, iterations=150, scale=2)\n\n# Plotting the graph with the adjusted layout\nnx.draw(G, pos, with_labels=True, node_size=2000, node_color=node_colors, font_size=12, font_color='black', width=2, edge_color='gray', alpha=0.6)\nplt.title(\"Beziehungen zwischen den Bereichen und zugehörigen Themen\", fontsize=20)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](questions-topics_files/figure-html/cell-4-output-1.png){width=2419 height=1008}\n:::\n:::\n\n\n",
    "supporting": [
      "questions-topics_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}